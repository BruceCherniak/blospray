// VERSION: 2
// ======================================================================== //
// BLOSPRAY - OSPRay as a Blender render engine                             //
// Paul Melis, SURFsara <paul.melis@surfsara.nl>                            //
// Protocol messages                                                        //
// ======================================================================== //
// Copyright 2018-2019 SURFsara                                             //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

syntax = "proto3";

message ClientMessage
{
    enum Type {
        HELLO = 0;                      
        BYE = 1;
        
        GET_SERVER_STATE = 10;
        
        CLEAR_SCENE = 11;
        UPDATE_SCENE = 12; 
        
        UPDATE_OBJECT = 20;
        UPDATE_BLENDER_MESH = 21;
        UPDATE_PLUGIN_INSTANCE = 22;

        DELETE_OBJECT = 30;
        DELETE_BLENDER_MESH = 31;
        DELETE_PLUGIN_INSTANCE = 32;
        
        START_RENDERING = 40;
        CANCEL_RENDERING = 41;
        
        QUERY_BOUND = 80;
        
        QUIT = 99;
    }
    
    Type    type = 1;
        
    //bool    bool_value = 10;
    uint32  uint_value = 20;            // HELLO     
    //float   float_value = 30;
    string  string_value = 40;          // QUERY_BOUND

    // XXX fold different types of submessages in here?
}

message HelloResult
{
    bool    success = 1;
    string  message = 2;    
}

message ServerStateResult
{
    string  state = 1;
}

message QueryBoundResult
{
    bool    success = 1;
    string  message = 2;
    uint32  result_size = 3;
}

message RenderResult 
{
    enum Type {
        FRAME = 0;
        CANCELED = 1;
        DONE = 2;
    }
    
    Type    type = 1;
    
    // FRAME
    uint32  sample = 2;
    string  file_name = 3;
    uint32  file_size = 4;
    float   memory_usage = 5;
}

// Scene

// Mesh Data with a plugin attached
message UpdatePluginInstance
{   
    enum Type {                    
        GEOMETRY = 0;   // Geometry plugin
        VOLUME = 1;     // Volume plugin
        SCENE = 2;      // Scene plugin
    }
    
    Type        type = 1;
    string      name = 2;
    
    string      plugin_name = 3;
    string      plugin_parameters = 4;
    string      custom_properties = 5;
}

message UpdateObject
{
    enum Type {
        // Regular Blender mesh
        MESH = 0;
        
        // OSPRay geometry (needs to reference geometry mesh data)
        GEOMETRY = 10;

        // OSPRay volume (needs to reference volume mesh data)
        VOLUME = 20;
        
        // OSPRay isosurfaces (needs to reference volume mesh data)
        ISOSURFACES = 30;
        
        // OSPRay slices (needs to reference volume mesh data)
        SLICES = 40;        
        
        // OSPRay scene (list of transformed Groups on the server)
        SCENE = 50;
        
        // A single light
        LIGHT = 60;
    }
    
    Type            type = 1;
    string          name = 2;
    string          custom_properties = 3;
    
    repeated float  object2world = 10;
    string          data_link = 11;
}

message Volume
{
    float   sampling_rate = 1;
}

message Slice
{
    string          linked_mesh = 1;
    repeated float  object2world = 2;
}

message Slices
{
    repeated Slice  slices = 1;
}

// Blender geometry (aka mesh)
message MeshData
{
    enum Flags {
        NONE = 0;
        NORMALS = 1;
        VERTEX_COLORS = 2;
        // UV = 4;
        // = 8;
    }

    uint32          flags = 1;
    uint32          num_vertices = 10;
    uint32          num_triangles = 11;
}

// Settings

message ImageSettings
{
    uint32          width = 1;
    uint32          height = 2;
    repeated float  border = 3;
}

message CameraSettings
{
    enum Type {
        PERSPECTIVE = 0;
        ORTHOGRAPHIC = 1;
        PANORAMIC = 2;
    }
    
    Type    type = 1;
    string  object_name = 2;
    string  camera_name = 3;

    repeated float position = 10;
    repeated float view_dir = 11;
    repeated float up_dir = 12;
    
    // Perspective
    float fov_y = 20;                // Degrees
    
    // Orthographic
    float height = 30;
    
    // Perspective, orthographic
    float aspect = 40;
    
    // Common
    float clip_start = 50;
    
    float dof_focus_distance = 60;
    float dof_aperture = 61;
}

message RenderSettings
{
    string          renderer = 1;
    
    uint32          samples = 2;
    uint32          ao_samples = 3;
    
    repeated float  background_color = 4;   // RGBA
    
    bool            shadows_enabled = 5;    // XXX no longer in API2?
}

message Light 
{
    enum Type {        
        AMBIENT = 0;
        POINT = 1;
        SUN = 2;
        SPOT = 3;
        AREA = 4;
    }
    
    Type            type = 1;
    repeated float  object2world = 2;
    string          object_name = 3;
    string          light_name = 4;
        
    // Common values
    repeated float  color = 10;
    float           intensity = 11;
    bool            visible = 12;
    
    // Per-type values
    repeated float  direction = 20;         // Directional, spot
    float           angular_diameter = 21;  // Directional
    repeated float  position = 22;          // Point/sphere, spot, quad
    float           radius = 23;            // Point/sphere, spot
    float           opening_angle = 24;     // Spot
    float           penumbra_angle = 25;    // Spot
    repeated float  edge1 = 26;             // Area/Quad
    repeated float  edge2 = 27;             // Area/Quad
}   

// Plugins

// Returned by generate function
message GenerateFunctionResult
{
    bool            success = 1;
    string          message = 2;        // XXX use JSON for returning multiple lines/messages?
    
    string          hash = 3;
}

