Port plugin geometry_cosmogrid to new style




Bugs
- Camera clipping start doesn't match cycles render, nor OpenGL scene view.
  And ospray only supports setting the clipping start, not a far clip value.
- Add top-level exception handling in the server
- The background alpha seems to be ignored (or always 0) when using the path
  tracer renderer
- https://developer.blender.org/T59089 (get evee render instead of custom one)
- https://developer.blender.org/T64295 (custom props not updating in UI)

Fix/improve/optimize
- Correctly release the scene after rendering
- If possible, get rid of OpenEXR as intermediate framebuffer file
  (depends on possibilities of blender API)
- Move background color settings from World panel to Render panel?
  With cycles it's a World setting, but with ospray it's a parameter
  of the scivis renderer
- Point and spot lights need a very high intensity value to contribute
  substantial light to the scene, while the sun light at 1 is already enough.
  For area lights the intensity value in ospray is per unit area, so scaling the
  light larger leads to more light in the scene. This is different from cycles,
  where changing the size keeps the scene lighting the same.
- Allow parenting a plane mesh to a volume to set slice planes, similar
  for the upcoming clip feature
- Improve the caching of scene elements, e.g. by having the the client get
  a list of elements from the server including hashes to figure out what
  data to send/update. Also check use of exported_meshes in connection.py
- Add checkbox for adaptive volume sampling, as it is enabled by default
- Return export report/errors as text and store them in text area on Blender side
- For batch renders there's no need to send the framebuffer for each
  sample, only need the final buffer, but not sure we can detect that 
  specific situation. Should look into how cycles handles this case.
  Btw, an OSPRenderer has an 'spp' parameter, meaning we could probably
  render all samples in one go and with less overhead due to not having
  to send each sample framebuffer from server to blender

Tests/examples:
- Check "volume" prop in some of the tests, isn't needed anymore is it?
- Isovalues2 test uses transform on structured volume
- slice.blend not working?
- xmas missing data in repo?

Must haves
- Light UI panel
- Volume UI panel
- Camera UI panel
- More render settings in the UI
- TF editor in Blender
- Interactive preview rendering
- Better error handling and recovery
- Better handling of instancing and (particle system) duplication, i.e. don't duplicate mesh
- Cancel render during export of large scenes (if this is even possible)
- Caching of large data sets across renders
- Interactive preview rendering, including adaptive accumulation
- Allow plugins to provide user-defined proxy geometry, not just a bbox

Very nice to haves ;-)
- UI buttons to preload/clear the scene on the server, including
  setting object bboxes of volumes to correct sizes (see also next point)
- UI button to query bbox/proxy geometry of server-side scene objects.
  We currently do this implicitly during the scene export phase of
  rendering, but since we're operating on a depsgraph copy this actually
  will not work (nor should we try to update the bbox mesh at that point). 
  So the user should query the bbox/proxies manually outside of the rendering
  step.

Nice to haves
- Start/stop server during rendering automatically
- UI button to get stats from server on currently loaded scene
- Handle text objects
- Reduce overhead in server -> client communication. E.g. render
  of angel.blend in 3840x2160 @ 4 spp takes 40.972s on the server,
  but 46.90s on the blender side (i.e. +14.5% longer)
- Textured geometry
- Provide a list of render presets
- Allow plugin parameters to use environment variables, so blend files
  can use non-hardcoded values for things like file paths
- Allow depth buffer to be returned to blender
- Log file for the server

Obscure to haves
- Handle multiple concurrent renders in Blender
- Optimize scene when Blender instances are used

Decide
- Protobuf is very nice for the combo data layout description, 
  serialization, application API it provides. But it is an extra dependency
  that users would need to install. Can we locally include protobuf
  in the sources and build process? Or should we get rid of it
  altogether?
  

Test
...

Look into
- How to leverage blender's node system
- OSPRay's extension modules and scenegraph, mostly w.r.t. model loading.
  Plus look at overlap in functionality with our own plugins. It seems
  ospray plugins need an ispc component, which makes them less attractive
  to use for end users (yet another tool/syntax to learn).
- ospray 2.0 async rendering support
- ospray 2.0 model clipping
- ospray_sg
